<?php namespace Thatzad\Birder;

use URL;
use Thujohn\Twitter\Twitter;
use Illuminate\Support\Collection;
use DotZecker\Larafeed\Larafeed as Feed;
use Thatzad\Birder\Exceptions\BirderException;

class Birder {

    /**
     * Type to look for
     */
    protected $type = 'user';

    /**
     * Value to look for
     */
    protected $value;

    /**
     * Conditions to filter by
     */
    protected $conditions = array(
        'condition' => 'and',
        'retweets'  => array('operator' => '>=', 'value' => 0),
        'favorites' => array('operator' => '>=', 'value' => 0)
    );

    /**
     * Permissed filters and aliases
     */
    protected $filterBy = array(
        'retweets'  => array('retweets', 'rts'),
        'favorites' => array('favorites', 'favourites', 'favs')
    );

    /**
     * Permissed operators
     */
    protected $operators = array('<', '<=', '=', '>=', '>', '!=');

    /**
     * Found tweets
     */
    protected $tweets;


    public function __construct(Twitter $twitter)
    {
        $this->twitter = $twitter;
    }


    /**
     * Fill the user data
     */
    public function user($user)
    {
        // Remove the @
        if (strstr($user, '@')) $user = substr($user, 1, strlen($user));

        $this->type  = 'user';
        $this->value = $user;

        return $this;
    }

    /**
     * Fill the hashtag data
     */
    public function hashtag($hashtag)
    {
        // Remove the #
        if (strstr($hashtag, '#')) $hashtag = substr($hashtag, 1, strlen($hashtag));

        $this->type  = 'hashtag';
        $this->value = $hashtag;

        return $this;
    }

    /**
     * Set the tweets
     * @param array $tweets
     */
    protected function setTweets($tweets)
    {
        $filteredTweets = array();

        foreach ($tweets as $tweet) {

            $rtTweet = doComparison($tweet->retweet_count, $this->conditions['retweets']['operator'], $this->conditions['retweets']['value']);

            $favTweet = doComparison($tweet->favorite_count, $this->conditions['favorites']['operator'], $this->conditions['favorites']['value']);

            $condition = ($this->conditions['condition'] == 'or')
                ? ($rtTweet or $favTweet)
                : ($rtTweet and $favTweet);

            if ($condition) $filteredTweets[] = $tweet;

        }

        $tweets = new Collection($filteredTweets);
        $this->tweets = $tweets->reverse();
    }

    /**
     * Get the tweets by user
     * @return void
     */
    protected function generateTweetsByUser()
    {
        $this->setTweets($this->twitter->getUserTimeline(array(
            'screen_name'     => $this->value,
            'include_rts'     => false,
            'exclude_replies' => true,
            'count'           => 200,
            'trim_user'       => false
        )));
    }

    /**
     * Get the tweets by hashtag
     * @return void
     */
    protected function generateTweetsByHashtag()
    {
        $this->setTweets($this->twitter->getSearch(array(
            'q'           => '#'.$this->value,
            'count'       => 100,
            'result_type' => 'recent'
        ))->statuses);
    }

    /**
     * Make the feed
     * @return Response
     */
    public function makeFeed()
    {
        $tweets = $this->get();

        $feed = new Feed('atom', array(
            'title' => "Generated tweets looking for {$this->type} {$this->value}",
            'link'  => URL::to('/'),
            'description' => "Timeline generated by Birder"
        ));

        $feed->addAuthor('Birder');

        $tweets->each(function($tweet) use ($feed)
        {
            $feed->addEntry(array(
                'title'   => $tweet->id_str,
                'link'    => "https://twitter.com/{$tweet->user->screen_name}/status/{$tweet->id_str}",
                'author'  => '@'.$tweet->user->screen_name,
                'pubDate' => $tweet->created_at,
                'content' => $tweet->text
            ));
        });

        return $feed->render();
    }

    /**
     * Return the tweets collection
     * @return Collection
     */
    public function get()
    {
        $this->{'generateTweetsBy'.ucfirst($this->type)}();

        return $this->tweets;
    }

    /**
     * Filter tweets
     * @param  string $type
     * @param  string $operator
     * @param  int    $value
     * @return Birder
     */
    public function where($type, $operator = '=', $value = null)
    {
        // If it used by this way: ´->where('retweets', 12);´
        if (is_null($value)) {
            $value = $operator;
            $operator = '=';
        }

        // @todo Integrate illuminate validation service
        if ( ! $type = array_search_recursive($type, $this->filterBy, true))
            throw new BirderException("{$type} is not a valid type" , 1);

        if ( ! in_array($operator, $this->operators))
            throw new BirderException("{$operator} is not a valid operator" , 1);

        if ( ! is_numeric($value))
            throw new BirderException("The value must be numeric, {$operator} given" , 1);

        $this->conditions[$type] = array(
            'operator' => $operator,
            'value'    => $value
        );

        return $this;
    }

    /**
     * Magic to enable do:
     *     ->whereFavorites(3)
     *     ->orWhereRetweets(8)
     * @param  $method
     * @param  $args
     * @return executed method
     */
    public function __call($method, $args)
    {
        if (starts_with($method, 'or')) {
            $this->conditions['condition'] = 'or';
            $method = ucfirst(substr($method, 2, strlen($method)));
        }

        $method = lcfirst($method);

        if (starts_with($method, 'where')) {
            $filterBy = lcfirst(substr($method, 5, strlen($method)));
            $args = array($filterBy, '=', $args[0]);

            return call_user_func_array(array($this, 'where'), $args);
        }

        throw new BirderException("Call to undefined method {$method}", 1);

    }

}
